package altinbulma.screens;

import java.util.Timer;
import java.util.TimerTask;
import altinbulma.A;
import altinbulma.B;
import altinbulma.Board;
import altinbulma.C;
import altinbulma.D;
import altinbulma.Player;
import java.awt.Color;
import java.awt.GridLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0, 0, 1024, 768);
        //setResizable(false);
        setLocationRelativeTo(null);

        //System.out.println("witdh: " + screenSize.width + " height: " + screenSize.height);
        setTitle("Altın Bulma Oyunu");
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanelMainMenu = new javax.swing.JPanel();
        btnOyunaBasla = new javax.swing.JLabel();
        btnAyarlar = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabelMadenci = new javax.swing.JLabel();
        jPanelSettings = new javax.swing.JPanel();
        jTextFieldRows = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCols = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldNumOfGoldsPlayer = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNumOfGoldsBoard = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldStepSize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldNumOfHiddenGoldsBoard = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldCostOfMovesB = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldTargetCostA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldCostOfMovesA = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldTargetCostB = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldCostOfMovesC = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldCostOfMovesD = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldTargetCostC = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldTargetCostD = new javax.swing.JTextField();
        btnCloseSettings = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        btnResetSettings = new javax.swing.JLabel();
        btnSaveSettings = new javax.swing.JLabel();
        jPanelGame = new javax.swing.JPanel();
        jPanelBoard = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabelGoldsA = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabelGoldsB = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabelGoldsC = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabelAltinSayisi = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabelGizliAltinSayisi = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabelGoldsD = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jSliderGameSpeed = new javax.swing.JSlider();
        jLabelKucukMadenci = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        jPanelMainMenu.setBackground(new java.awt.Color(56, 62, 66));

        btnOyunaBasla.setText("btnOyunaBasla");
        btnOyunaBasla.setToolTipText("Oyuna Başla");
        btnOyunaBasla.setMaximumSize(new java.awt.Dimension(250, 100));
        btnOyunaBasla.setMinimumSize(new java.awt.Dimension(250, 100));
        btnOyunaBasla.setPreferredSize(new java.awt.Dimension(250, 100));
        btnOyunaBasla.setIcon(new ImageIcon("images/btnOyunaBasla.png"));
        btnOyunaBasla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOyunaBaslaMouseClicked(evt);
            }
        });

        btnAyarlar.setText("btnAyarlar");
        btnAyarlar.setToolTipText("Ayarlar");
        btnAyarlar.setMaximumSize(new java.awt.Dimension(250, 100));
        btnAyarlar.setMinimumSize(new java.awt.Dimension(250, 100));
        btnAyarlar.setPreferredSize(new java.awt.Dimension(250, 100));
        btnAyarlar.setIcon(new ImageIcon("images/btnAyarlar.png"));
        btnAyarlar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAyarlarMouseClicked(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Comic Sans MS", 1, 48)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(247, 177, 56));
        jLabel31.setText("ALTIN BULMA OYUNU");

        jLabelMadenci.setMaximumSize(new java.awt.Dimension(400, 300));
        jLabelMadenci.setMinimumSize(new java.awt.Dimension(400, 300));
        jLabelMadenci.setPreferredSize(new java.awt.Dimension(400, 300));
        jLabelMadenci.setIcon(new ImageIcon("images/madenci.png"));

        javax.swing.GroupLayout jPanelMainMenuLayout = new javax.swing.GroupLayout(jPanelMainMenu);
        jPanelMainMenu.setLayout(jPanelMainMenuLayout);
        jPanelMainMenuLayout.setHorizontalGroup(
            jPanelMainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                .addGroup(jPanelMainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelMadenci, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addGroup(jPanelMainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnOyunaBasla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAyarlar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jLabel31)))
                .addGap(507, 507, 507))
        );
        jPanelMainMenuLayout.setVerticalGroup(
            jPanelMainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel31)
                .addGroup(jPanelMainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnOyunaBasla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(btnAyarlar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelMainMenuLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabelMadenci, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(170, Short.MAX_VALUE))
        );

        jLayeredPane1.add(jPanelMainMenu, "card2");

        jPanelSettings.setBackground(new java.awt.Color(56, 62, 66));
        jPanelSettings.setLayout(null);

        jTextFieldRows.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldRows.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldRows.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldRows.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jTextFieldRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRowsActionPerformed(evt);
            }
        });
        jPanelSettings.add(jTextFieldRows);
        jTextFieldRows.setBounds(341, 58, 180, 32);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(247, 177, 56));
        jLabel1.setText("Sütun Sayısı:");
        jPanelSettings.add(jLabel1);
        jLabel1.setBounds(608, 57, 114, 30);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(247, 177, 56));
        jLabel2.setText("Altın Sayısı:");
        jPanelSettings.add(jLabel2);
        jLabel2.setBounds(212, 120, 107, 32);

        jTextFieldCols.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldCols.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldCols.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldCols.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jTextFieldCols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldColsActionPerformed(evt);
            }
        });
        jPanelSettings.add(jTextFieldCols);
        jTextFieldCols.setBounds(741, 58, 240, 32);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(247, 177, 56));
        jLabel3.setText("Satır Sayısı:");
        jPanelSettings.add(jLabel3);
        jLabel3.setBounds(212, 56, 111, 32);

        jTextFieldNumOfGoldsPlayer.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldNumOfGoldsPlayer.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldNumOfGoldsPlayer.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldNumOfGoldsPlayer.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldNumOfGoldsPlayer);
        jTextFieldNumOfGoldsPlayer.setBounds(811, 122, 170, 32);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(247, 177, 56));
        jLabel4.setText("Gizli Altın Sayısı:");
        jPanelSettings.add(jLabel4);
        jLabel4.setBounds(212, 184, 152, 32);

        jTextFieldNumOfGoldsBoard.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldNumOfGoldsBoard.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldNumOfGoldsBoard.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldNumOfGoldsBoard.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jTextFieldNumOfGoldsBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumOfGoldsBoardActionPerformed(evt);
            }
        });
        jPanelSettings.add(jTextFieldNumOfGoldsBoard);
        jTextFieldNumOfGoldsBoard.setBounds(361, 122, 160, 32);

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(247, 177, 56));
        jLabel5.setText("Oyuncu Altın Sayısı:");
        jPanelSettings.add(jLabel5);
        jLabel5.setBounds(608, 120, 175, 32);

        jTextFieldStepSize.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldStepSize.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldStepSize.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldStepSize.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldStepSize);
        jTextFieldStepSize.setBounds(811, 186, 170, 32);

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(247, 177, 56));
        jLabel6.setText("Oyuncu Adım Sayısı:");
        jPanelSettings.add(jLabel6);
        jLabel6.setBounds(608, 184, 178, 32);

        jTextFieldNumOfHiddenGoldsBoard.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldNumOfHiddenGoldsBoard.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldNumOfHiddenGoldsBoard.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldNumOfHiddenGoldsBoard.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldNumOfHiddenGoldsBoard);
        jTextFieldNumOfHiddenGoldsBoard.setBounds(401, 186, 120, 32);

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("A Oyuncusu:");
        jPanelSettings.add(jLabel7);
        jLabel7.setBounds(212, 278, 143, 34);

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("B Oyuncusu:");
        jPanelSettings.add(jLabel8);
        jLabel8.setBounds(608, 278, 140, 34);

        jLabel9.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(247, 177, 56));
        jLabel9.setText("Hamle Maliyeti:");
        jPanelSettings.add(jLabel9);
        jLabel9.setBounds(608, 340, 138, 32);

        jTextFieldCostOfMovesB.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldCostOfMovesB.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldCostOfMovesB.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldCostOfMovesB.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldCostOfMovesB);
        jTextFieldCostOfMovesB.setBounds(761, 342, 220, 32);

        jLabel10.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(247, 177, 56));
        jLabel10.setText("Hamle Maliyeti:");
        jPanelSettings.add(jLabel10);
        jLabel10.setBounds(212, 340, 138, 32);

        jTextFieldTargetCostA.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldTargetCostA.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldTargetCostA.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldTargetCostA.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldTargetCostA);
        jTextFieldTargetCostA.setBounds(471, 396, 50, 32);

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(247, 177, 56));
        jLabel11.setText("Hedef Belirleme Maaliyeti:");
        jPanelSettings.add(jLabel11);
        jLabel11.setBounds(212, 394, 236, 32);

        jTextFieldCostOfMovesA.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldCostOfMovesA.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldCostOfMovesA.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldCostOfMovesA.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldCostOfMovesA);
        jTextFieldCostOfMovesA.setBounds(371, 340, 150, 36);

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(247, 177, 56));
        jLabel12.setText("Hedef Belirleme Maaliyeti:");
        jPanelSettings.add(jLabel12);
        jLabel12.setBounds(608, 394, 236, 32);

        jTextFieldTargetCostB.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldTargetCostB.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldTargetCostB.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldTargetCostB.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldTargetCostB);
        jTextFieldTargetCostB.setBounds(871, 396, 110, 32);

        jLabel13.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("C Oyuncusu:");
        jPanelSettings.add(jLabel13);
        jLabel13.setBounds(212, 458, 140, 34);

        jLabel14.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(247, 177, 56));
        jLabel14.setText("Hamle Maliyeti:");
        jPanelSettings.add(jLabel14);
        jLabel14.setBounds(608, 520, 138, 32);

        jTextFieldCostOfMovesC.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldCostOfMovesC.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldCostOfMovesC.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldCostOfMovesC.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldCostOfMovesC);
        jTextFieldCostOfMovesC.setBounds(371, 518, 150, 36);

        jLabel15.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("D Oyuncusu:");
        jPanelSettings.add(jLabel15);
        jLabel15.setBounds(608, 458, 142, 34);

        jLabel16.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(247, 177, 56));
        jLabel16.setText("Hamle Maliyeti:");
        jPanelSettings.add(jLabel16);
        jLabel16.setBounds(212, 518, 138, 32);

        jTextFieldCostOfMovesD.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldCostOfMovesD.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldCostOfMovesD.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldCostOfMovesD.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldCostOfMovesD);
        jTextFieldCostOfMovesD.setBounds(761, 522, 220, 32);

        jLabel17.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(247, 177, 56));
        jLabel17.setText("Hedef Belirleme Maaliyeti:");
        jPanelSettings.add(jLabel17);
        jLabel17.setBounds(212, 572, 236, 32);

        jTextFieldTargetCostC.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldTargetCostC.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldTargetCostC.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldTargetCostC.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldTargetCostC);
        jTextFieldTargetCostC.setBounds(471, 574, 50, 32);

        jLabel18.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(247, 177, 56));
        jLabel18.setText("Hedef Belirleme Maaliyeti:");
        jPanelSettings.add(jLabel18);
        jLabel18.setBounds(608, 572, 236, 32);

        jTextFieldTargetCostD.setBackground(new java.awt.Color(56, 62, 66));
        jTextFieldTargetCostD.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextFieldTargetCostD.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldTargetCostD.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jPanelSettings.add(jTextFieldTargetCostD);
        jTextFieldTargetCostD.setBounds(861, 574, 120, 32);

        btnCloseSettings.setMaximumSize(new java.awt.Dimension(100, 40));
        btnCloseSettings.setMinimumSize(new java.awt.Dimension(100, 40));
        btnCloseSettings.setPreferredSize(new java.awt.Dimension(100, 40));
        btnCloseSettings.setIcon(new ImageIcon("images/btnCloseSettings.png"));
        btnCloseSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCloseSettingsMouseClicked(evt);
            }
        });
        jPanelSettings.add(btnCloseSettings);
        btnCloseSettings.setBounds(210, 630, 250, 80);

        jLabel32.setFont(new java.awt.Font("Comic Sans MS", 1, 32)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("AYARLAR");
        jPanelSettings.add(jLabel32);
        jLabel32.setBounds(490, 10, 233, 40);

        btnResetSettings.setMaximumSize(new java.awt.Dimension(100, 40));
        btnResetSettings.setMinimumSize(new java.awt.Dimension(100, 40));
        btnResetSettings.setPreferredSize(new java.awt.Dimension(100, 40));
        btnResetSettings.setIcon(new ImageIcon("images/btnResetSettings.png"));
        btnResetSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetSettingsMouseClicked(evt);
            }
        });
        jPanelSettings.add(btnResetSettings);
        btnResetSettings.setBounds(510, 640, 240, 70);

        btnSaveSettings.setMaximumSize(new java.awt.Dimension(100, 40));
        btnSaveSettings.setMinimumSize(new java.awt.Dimension(100, 40));
        btnSaveSettings.setPreferredSize(new java.awt.Dimension(100, 40));
        btnSaveSettings.setIcon(new ImageIcon("images/btnSaveSettings.png"));
        btnSaveSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveSettingsMouseClicked(evt);
            }
        });
        jPanelSettings.add(btnSaveSettings);
        btnSaveSettings.setBounds(790, 640, 190, 70);

        jLayeredPane1.add(jPanelSettings, "card4");

        jPanelGame.setBackground(new java.awt.Color(56, 62, 66));

        jPanelBoard.setBackground(new java.awt.Color(56, 62, 66));

        javax.swing.GroupLayout jPanelBoardLayout = new javax.swing.GroupLayout(jPanelBoard);
        jPanelBoard.setLayout(jPanelBoardLayout);
        jPanelBoardLayout.setHorizontalGroup(
            jPanelBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1113, Short.MAX_VALUE)
        );
        jPanelBoardLayout.setVerticalGroup(
            jPanelBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(56, 62, 66));

        jLabel19.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("SKOR TABLOSU");

        jLabel20.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(247, 177, 56));
        jLabel20.setText("B Oyuncusu:");

        jLabelGoldsA.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelGoldsA.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGoldsA.setText("jLabelGoldsA");

        jLabel21.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(247, 177, 56));
        jLabel21.setText("A Oyuncusu:");

        jLabelGoldsB.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelGoldsB.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGoldsB.setText("jLabelGoldsB");

        jLabel22.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(247, 177, 56));
        jLabel22.setText("C Oyuncusu:");

        jLabelGoldsC.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelGoldsC.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGoldsC.setText("jLabelGoldsC");

        jLabel23.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(247, 177, 56));
        jLabel23.setText("Altın Sayısı:");

        jLabelAltinSayisi.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelAltinSayisi.setForeground(new java.awt.Color(255, 255, 255));
        jLabelAltinSayisi.setText("jLabelAltinSayisi");

        jLabel24.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(247, 177, 56));
        jLabel24.setText("Gizli Altın Sayısı:");

        jLabelGizliAltinSayisi.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelGizliAltinSayisi.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGizliAltinSayisi.setText("jLabelGAltinS");

        jLabel25.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(247, 177, 56));
        jLabel25.setText("D Oyuncusu:");

        jLabelGoldsD.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelGoldsD.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGoldsD.setText("jLabelGoldsD");

        jLabel26.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("1 Sn");

        jLabel27.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText(" 0.1 Sn");

        jLabel28.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("3 Sn");

        jLabel29.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Oyun Hızı :");

        jLabel30.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("2 Sn");

        jSliderGameSpeed.setBackground(new java.awt.Color(56, 62, 66));
        jSliderGameSpeed.setMaximum(3000);
        jSliderGameSpeed.setMinimum(100);
        jSliderGameSpeed.setValue(1000);

        jLabelKucukMadenci.setMaximumSize(new java.awt.Dimension(177, 157));
        jLabelKucukMadenci.setMinimumSize(new java.awt.Dimension(177, 157));
        jLabelKucukMadenci.setPreferredSize(new java.awt.Dimension(177, 157));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelAltinSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelGizliAltinSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(39, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel21)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel25))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelGoldsD, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelGoldsC, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelGoldsB, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelGoldsA, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel27)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel26)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel30)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel28))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabelKucukMadenci, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSliderGameSpeed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGoldsA, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGoldsB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGoldsC, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGoldsD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAltinSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelGizliAltinSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabel29)
                .addGap(18, 18, 18)
                .addComponent(jSliderGameSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jLabel26)
                    .addComponent(jLabel30)
                    .addComponent(jLabel28))
                .addGap(18, 18, 18)
                .addComponent(jLabelKucukMadenci, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabelKucukMadenci.setIcon(new ImageIcon("images/miner.png"));

        javax.swing.GroupLayout jPanelGameLayout = new javax.swing.GroupLayout(jPanelGame);
        jPanelGame.setLayout(jPanelGameLayout);
        jPanelGameLayout.setHorizontalGroup(
            jPanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGameLayout.createSequentialGroup()
                .addComponent(jPanelBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelGameLayout.setVerticalGroup(
            jPanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLayeredPane1.add(jPanelGame, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Oyun Tahtası referansı
    Board board;
    //Oyuncuların referansı;
    Player player;
    A playerA;
    B playerB;
    C playerC;
    D playerD;
    final Color labelColor = Color.decode("#464e53");
    final Color hiddenGoldColor = Color.decode("#383e42");

    //Oyunu başlatan buton
       private void btnOyunaBaslaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOyunaBaslaMouseClicked

           //Board referans kontrol
           if (board == null) {
               board = new Board();

           }
           //Player referans kontrol
           if (player == null) {
               player = new Player();
           }
           //A referans kontrol
           if (playerA == null) {
               playerA = new A(0, 0);
           }
           //B referans kontrol
           if (playerB == null) {
               playerB = new B(0, board.getSutunSayisi() - 1);
           }
           //C referans kontrol
           if (playerC == null) {
               playerC = new C(board.getSatirSayisi() - 1, board.getSutunSayisi() - 1);
           }
           // referans kontrol
           if (playerD == null) {
               playerD = new D(board.getSatirSayisi() - 1, 0);
           }

           jPanelMainMenu.setVisible(false);
           jPanelGame.setVisible(true);
           jPanelBoard.setLayout(new GridLayout(board.getSatirSayisi(), board.getSutunSayisi()));

           JLabel[][] grid = new JLabel[board.getSatirSayisi()][board.getSutunSayisi()];

           for (int i = 0; i < board.getSatirSayisi(); i++) {
               for (int j = 0; j < board.getSutunSayisi(); j++) {
                   grid[i][j] = new JLabel();
                   grid[i][j].setBackground(labelColor);
                   grid[i][j].setBorder(new LineBorder(Color.WHITE));

                   grid[i][j].setOpaque(true);
                   jPanelBoard.add(grid[i][j]);
               }
           }

           Set<Integer> uniqueGoldLocations = new HashSet<>();
           Set<Integer> uniqueHiddenGoldLocations = new HashSet<>(); //gizli altinlar icin
           Random random = new Random();
           while (uniqueGoldLocations.size() != board.getAltinSayisi() - board.getGizliAltinSayisi()) { // %10 u haritada gizli olduğu için 72 yaptım
               int randInt = random.nextInt(board.getSatirSayisi() * board.getSutunSayisi());
               uniqueGoldLocations.add(randInt);
           }
           while (uniqueHiddenGoldLocations.size() != board.getGizliAltinSayisi()) { // %10 u haritada gizli olduğu için 8 yaptım
               int randInt = random.nextInt(board.getSatirSayisi() * board.getSutunSayisi());
               if (uniqueGoldLocations.contains(randInt)) {
                   continue;
               }
               uniqueHiddenGoldLocations.add(randInt);
           }

           int[][] GoldLocations = new int[board.getSatirSayisi()][board.getSutunSayisi()];
           int[][] hiddenGoldLocations = new int[board.getSatirSayisi()][board.getSutunSayisi()];

           int ctr = 0, r;
           // r rand için
           int atlananAltin = 0;
           int atlananGizliAltin = 0;
           int sarisay = 0;
           int mavisay = 0;
           for (int i = 0; i < board.getSatirSayisi(); i++) {
               for (int j = 0; j < board.getSutunSayisi(); j++) {
                   if (uniqueGoldLocations.contains(ctr)) {

                       if ((i == 0 && j == 0) || (i == 0 && j == (board.getSutunSayisi() - 1))
                               || (i == (board.getSatirSayisi() - 1) && j == 0) || (i == (board.getSatirSayisi() - 1) && j == (board.getSutunSayisi() - 1))) {
                           atlananAltin++;
                           //System.out.println(i + "" + j + "de 1 adet sari atlandi");
                           ctr++;
                           continue;
                       }
                       r = random.nextInt(4) + 1;
                       GoldLocations[i][j] = r * 5;
                       grid[i][j].setText(Integer.toString(r * 5));
                       grid[i][j].setBackground(Color.yellow);
                       sarisay++;
                   } else if (uniqueHiddenGoldLocations.contains(ctr)) {

                       if ((i == 0 && j == 0) || (i == 0 && j == (board.getSutunSayisi() - 1))
                               || (i == (board.getSatirSayisi() - 1) && j == 0) || (i == (board.getSatirSayisi() - 1) && j == (board.getSutunSayisi() - 1))) {
                           atlananGizliAltin++;
                           //System.out.println(i + "" + j + "de 1 adet mavi atlandi");
                           ctr++;
                           continue;
                       }
                       r = random.nextInt(4) + 1;
                       hiddenGoldLocations[i][j] = r * 5;
                       grid[i][j].setText(Integer.toString(r * 5));
                       grid[i][j].setBackground(hiddenGoldColor);
                       mavisay++;

                   }

                   ctr++;
               }
           }

           while (atlananAltin != 0) {
               int x = random.nextInt(board.getSatirSayisi() - 2) + 1;
               int y = random.nextInt(board.getSutunSayisi() - 2) + 1;
               if (grid[x][y].getBackground() == Color.yellow || grid[x][y].getBackground() == hiddenGoldColor) {

               } else {
                   r = random.nextInt(4) + 1;
                   GoldLocations[x][y] = r * 5;
                   grid[x][y].setText(Integer.toString(r * 5));
                   grid[x][y].setBackground(Color.yellow);
                   sarisay++;
                   atlananAltin--;
               }

           }

           while (atlananGizliAltin != 0) {
               int x = random.nextInt(board.getSatirSayisi() - 2) + 1;
               int y = random.nextInt(board.getSutunSayisi() - 2) + 1;
               if (grid[x][y].getBackground() == Color.yellow || grid[x][y].getBackground() == hiddenGoldColor) {

               } else {
                   r = random.nextInt(4) + 1;
                   hiddenGoldLocations[x][y] = r * 5;
                   grid[x][y].setText(Integer.toString(r * 5));
                   grid[x][y].setBackground(hiddenGoldColor);
                   mavisay++;
                   atlananGizliAltin--;
               }

           }

           board.setGoldLocations(GoldLocations);
           board.setHiddenGoldLocations(hiddenGoldLocations);
           // Oyuncu iconlarının tahtaya göre düzenlenmesi
           if (board.getSutunSayisi() > 55 || board.getSatirSayisi() > 55) {

               playerA.setIcon(new ImageIcon("images/playerIconASmallest.png"));
               playerB.setIcon(new ImageIcon("images/playerIconBSmallest.png"));
               playerC.setIcon(new ImageIcon("images/playerIconCSmallest.png"));
               playerD.setIcon(new ImageIcon("images/playerIconDSmallest.png"));

           } else if (board.getSutunSayisi() > 40 || board.getSatirSayisi() > 40) {

               playerA.setIcon(new ImageIcon("images/playerIconAverySmall.png"));
               playerB.setIcon(new ImageIcon("images/playerIconBverySmall.png"));
               playerC.setIcon(new ImageIcon("images/playerIconCverySmall.png"));
               playerD.setIcon(new ImageIcon("images/playerIconDverySmall.png"));

           } else if (board.getSutunSayisi() > 25 || board.getSatirSayisi() > 25) {

               playerA.setIcon(new ImageIcon("images/playerIconASmall.png"));
               playerB.setIcon(new ImageIcon("images/playerIconBSmall.png"));
               playerC.setIcon(new ImageIcon("images/playerIconCSmall.png"));
               playerD.setIcon(new ImageIcon("images/playerIconDSmall.png"));
           }

           Timer timer = new Timer();
           // Skor tablosunun ilk değerleri
           jLabelGoldsA.setText(String.valueOf(playerA.getOyuncuAltinSayisi()));
           jLabelGoldsB.setText(String.valueOf(playerB.getOyuncuAltinSayisi()));
           jLabelGoldsC.setText(String.valueOf(playerC.getOyuncuAltinSayisi()));
           jLabelGoldsD.setText(String.valueOf(playerD.getOyuncuAltinSayisi()));
           jLabelAltinSayisi.setText(String.valueOf(board.getAltinSayisi()));
           jLabelGizliAltinSayisi.setText(String.valueOf(board.getGizliAltinSayisi()));

           //Oyun tahtasındaki ilk yerler
           grid[playerA.getY()][playerA.getX()].setIcon(playerA.getIcon());
           grid[playerB.getY()][playerB.getX()].setIcon(playerB.getIcon());
           grid[playerC.getY()][playerC.getX()].setIcon(playerC.getIcon());
           grid[playerD.getY()][playerD.getX()].setIcon(playerD.getIcon());

           TimerTask sayacTimerTask = new TimerTask() {

               @Override
               public void run() {
                   // Oyun hızına göre boarddaki miner icon
                   if (jSliderGameSpeed.getValue() > 1800) {
                       jLabelKucukMadenci.setIcon(new ImageIcon("images/oldMiner.png"));
                   } else if (jSliderGameSpeed.getValue() > 600) {
                       jLabelKucukMadenci.setIcon(new ImageIcon("images/miner.png"));
                   } else if (jSliderGameSpeed.getValue() <= 600) {
                       jLabelKucukMadenci.setIcon(new ImageIcon("images/angryMiner.png"));
                   }

                   try {
                       Thread.sleep(jSliderGameSpeed.getValue());
                   } catch (InterruptedException ex) {
                       Thread.currentThread().interrupt();
                   }

                   //A Oyuncusu
                   if (playerA.getHedefX() == playerA.getX() && playerA.getHedefY() == playerA.getY() && playerA.getOyuncuAltinSayisi() >= playerA.getHedefBelirlemeMaliyeti()) {
                       playerA.altinBul(board, jLabelGoldsA);//hedefe vardıysan yeni hedef seç
                       //varmadıysan eski hedefe devam
                   }
                   if (playerA.getOyuncuAltinSayisi() >= playerA.getHamleMaliyeti()) {
                       if (board.getGoldLocations()[playerA.getHedefY()][playerA.getHedefX()] == 0) {
//                        System.out.println("A nın hedefindeki altin alindigindan A yeni hedef belirliyor");
                           if (playerA.getOyuncuAltinSayisi() >= playerA.getHedefBelirlemeMaliyeti()) {
                               playerA.altinBul(board, jLabelGoldsA);// eger hedefledigin yerde altin yoksa yeniden hedef belirle
                               if (playerA.getOyuncuAltinSayisi() >= playerA.getHamleMaliyeti()) {
                                   if (board.getAltinSayisi() > 0) {
                                       playerA.hamleYap(board, grid, jLabelGoldsA);
                                   }
                               }
                           }

                       } else {
                           if (board.getAltinSayisi() > 0) {
                               playerA.hamleYap(board, grid, jLabelGoldsA);
                           }
                       }

                   }

                   try {
                       Thread.sleep(jSliderGameSpeed.getValue());
                   } catch (InterruptedException ex) {
                       Thread.currentThread().interrupt();
                   }
                   // B oyuncusu
                   if (playerB.getHedefX() == playerB.getX() && playerB.getHedefY() == playerB.getY() && playerB.getOyuncuAltinSayisi() >= playerB.getHedefBelirlemeMaliyeti()) {
                       playerB.altinBul(board, jLabelGoldsB);//hedefe vardıysan yeni hedef seç
                       //varmadıysan eski hedefe devam
                   }
                   if (playerB.getOyuncuAltinSayisi() >= playerB.getHamleMaliyeti()) {
                       if (board.getGoldLocations()[playerB.getHedefY()][playerB.getHedefX()] == 0) {
//                        System.out.println("B nın hedefindeki altin alindigindan B yeni hedef belirliyor");
                           if (playerB.getOyuncuAltinSayisi() >= playerB.getHedefBelirlemeMaliyeti()) {
                               playerB.altinBul(board, jLabelGoldsB);// eger hedefledigin yerde altin yoksa yeniden hedef belirle
                               if (playerB.getOyuncuAltinSayisi() >= playerB.getHamleMaliyeti()) {
                                   if (board.getAltinSayisi() > 0) {
                                       playerB.hamleYap(board, grid, jLabelGoldsB);
                                   }
                               }
                           }

                       } else {
                           if (board.getAltinSayisi() > 0) {
                               playerB.hamleYap(board, grid, jLabelGoldsB);
                           }
                       }

                   }
                   try {
                       Thread.sleep(jSliderGameSpeed.getValue());
                   } catch (InterruptedException ex) {
                       Thread.currentThread().interrupt();
                   }
                   // C Oyuncusu
                   if (board.getGizliAltinSayisi() >= 2) {
                       for (int i = 0; i < 2; i++) {
                           playerC.gizliAltinBul(board, grid);
                       }
                       if (playerC.getHedefX() == playerC.getX() && playerC.getHedefY() == playerC.getY() && playerC.getOyuncuAltinSayisi() >= playerC.getHedefBelirlemeMaliyeti()) {
                           playerC.altinBul(board, jLabelGoldsC);//hedefe vardıysan yeni hedef seç
                           //varmadıysan eski hedefe devam
                       }

                   } else if (board.getGizliAltinSayisi() == 1) {
                       playerC.gizliAltinBul(board, grid);
                       if (playerC.getHedefX() == playerC.getX() && playerC.getHedefY() == playerC.getY() && playerC.getOyuncuAltinSayisi() >= playerC.getHedefBelirlemeMaliyeti()) {
                           playerC.altinBul(board, jLabelGoldsC);//hedefe vardıysan yeni hedef seç
                           //varmadıysan eski hedefe devam
                       }
                   } else {
                       if (playerC.getHedefX() == playerC.getX() && playerC.getHedefY() == playerC.getY() && playerC.getOyuncuAltinSayisi() >= playerC.getHedefBelirlemeMaliyeti()) {
                           playerC.altinBul(board, jLabelGoldsC);//hedefe vardıysan yeni hedef seç
                           //varmadıysan eski hedefe devam
                       }

                   }
                   if (playerC.getOyuncuAltinSayisi() >= playerC.getHamleMaliyeti()) {
                       if (board.getGoldLocations()[playerC.getHedefY()][playerC.getHedefX()] == 0) {
//                        System.out.println("C nın hedefindeki altin alindigindan C yeni hedef belirliyor");
                           if (playerC.getOyuncuAltinSayisi() >= playerC.getHedefBelirlemeMaliyeti()) {
                               playerC.altinBul(board, jLabelGoldsC);// eger hedefledigin yerde altin yoksa yeniden hedef belirle
                               if (playerC.getOyuncuAltinSayisi() >= playerC.getHamleMaliyeti()) {
                                   if (board.getAltinSayisi() > 0) {
                                       playerC.hamleYap(board, grid, jLabelGoldsC);
                                   }
                               }
                           }

                       } else {
                           if (board.getAltinSayisi() > 0) {
                               playerC.hamleYap(board, grid, jLabelGoldsC);
                           }
                       }

                   }

                   try {
                       Thread.sleep(jSliderGameSpeed.getValue());
                   } catch (InterruptedException ex) {
                       Thread.currentThread().interrupt();
                   }

                   //D Oyuncusu
                   if (playerD.getHedefX() == playerD.getX() && playerD.getHedefY() == playerD.getY() && playerD.getOyuncuAltinSayisi() >= playerD.getHedefBelirlemeMaliyeti()) {
                       playerD.altinBul(board, jLabelGoldsD, playerA, playerB, playerC);//hedefe vardıysan yeni hedef seç
                       //varmadıysan eski hedefe devam
                   }
                   if (playerD.getOyuncuAltinSayisi() >= playerD.getHamleMaliyeti()) {
                       if (board.getGoldLocations()[playerD.getHedefY()][playerD.getHedefX()] == 0) {
//                        System.out.println("D nın hedefindeki altin alindigindan D yeni hedef belirliyor");
                           if (playerD.getOyuncuAltinSayisi() >= playerD.getHedefBelirlemeMaliyeti()) {
                               playerD.altinBul(board, jLabelGoldsD, playerA, playerB, playerC);// eger hedefledigin yerde altin yoksa yeniden hedef belirle
                               if (playerD.getOyuncuAltinSayisi() >= playerD.getHamleMaliyeti()) {
                                   playerD.hamleYap(board, grid, jLabelGoldsD);
                               }
                           }

                       } else {
                           playerD.hamleYap(board, grid, jLabelGoldsD);
                       }

                   }
                   jLabelAltinSayisi.setText(String.valueOf(board.getAltinSayisi()));
                   jLabelGizliAltinSayisi.setText(String.valueOf(board.getGizliAltinSayisi()));

                   // Oyunun bitme koşulları
                   //A oyuncusunun kazanması
                   if ((playerD.getOyuncuAltinSayisi() < playerD.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerD.getHedefY()][playerD.getHedefX()] == 0)
                           && playerD.getOyuncuAltinSayisi() < playerD.getHedefBelirlemeMaliyeti()))
                           && (playerC.getOyuncuAltinSayisi() < playerC.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerC.getHedefY()][playerC.getHedefX()] == 0)
                           && playerC.getOyuncuAltinSayisi() < playerC.getHedefBelirlemeMaliyeti()))
                           && (playerB.getOyuncuAltinSayisi() < playerB.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerB.getHedefY()][playerB.getHedefX()] == 0)
                           && playerB.getOyuncuAltinSayisi() < playerB.getHedefBelirlemeMaliyeti()))) {
//                    System.out.println("Oyuncuların altını bittiğinden oyun bitti!");//burası geçici ve öylesine , normalde adimat fonksiyonuna koyarız bunu
                       String info = "\nA Oyuncusunun attığı toplam adım sayısı: " + playerA.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerA.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerA.getToplananAltinSayisi() - playerA.getOyuncuAltinSayisi())
                               + "\nB Oyuncusunun attığı toplam adım sayısı: " + playerB.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerB.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerB.getToplananAltinSayisi() - playerB.getOyuncuAltinSayisi())
                               + "\nC Oyuncusunun attığı toplam adım sayısı: " + playerC.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerC.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerC.getToplananAltinSayisi() - playerC.getOyuncuAltinSayisi())
                               + "\nD Oyuncusunun attığı toplam adım sayısı: " + playerD.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerD.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerD.getToplananAltinSayisi() - playerD.getOyuncuAltinSayisi());
                       JOptionPane.showMessageDialog(null, "Oyuncu Altın Sayısı: " + playerA.getOyuncuAltinSayisi() + info, "A Oyuncusu Kazandı!", JOptionPane.INFORMATION_MESSAGE);
                       timer.cancel();
                   }

                   //B oyuncusunun kazanması
                   if ((playerD.getOyuncuAltinSayisi() < playerD.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerD.getHedefY()][playerD.getHedefX()] == 0)
                           && playerD.getOyuncuAltinSayisi() < playerD.getHedefBelirlemeMaliyeti()))
                           && (playerC.getOyuncuAltinSayisi() < playerC.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerC.getHedefY()][playerC.getHedefX()] == 0)
                           && playerC.getOyuncuAltinSayisi() < playerC.getHedefBelirlemeMaliyeti()))
                           && (playerA.getOyuncuAltinSayisi() < playerA.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerA.getHedefY()][playerA.getHedefX()] == 0)
                           && playerA.getOyuncuAltinSayisi() < playerA.getHedefBelirlemeMaliyeti()))) {
//                    System.out.println("Oyuncuların altını bittiğinden oyun bitti!");//burası geçici ve öylesine , normalde adimat fonksiyonuna koyarız bunu
                       String info = "\nA Oyuncusunun attığı toplam adım sayısı: " + playerA.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerA.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerA.getToplananAltinSayisi() - playerA.getOyuncuAltinSayisi())
                               + "\nB Oyuncusunun attığı toplam adım sayısı: " + playerB.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerB.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerB.getToplananAltinSayisi() - playerB.getOyuncuAltinSayisi())
                               + "\nC Oyuncusunun attığı toplam adım sayısı: " + playerC.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerC.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerC.getToplananAltinSayisi() - playerC.getOyuncuAltinSayisi())
                               + "\nD Oyuncusunun attığı toplam adım sayısı: " + playerD.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerD.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerD.getToplananAltinSayisi() - playerD.getOyuncuAltinSayisi());
                       JOptionPane.showMessageDialog(null, "Oyuncu Altın Sayısı: " + playerB.getOyuncuAltinSayisi() + info, "B Oyuncusu Kazandı!", JOptionPane.INFORMATION_MESSAGE);
                       timer.cancel();
                   }

                   //C oyuncusunun kazanması
                   if ((playerD.getOyuncuAltinSayisi() < playerD.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerD.getHedefY()][playerD.getHedefX()] == 0)
                           && playerD.getOyuncuAltinSayisi() < playerD.getHedefBelirlemeMaliyeti()))
                           && (playerB.getOyuncuAltinSayisi() < playerB.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerB.getHedefY()][playerB.getHedefX()] == 0)
                           && playerB.getOyuncuAltinSayisi() < playerB.getHedefBelirlemeMaliyeti()))
                           && (playerA.getOyuncuAltinSayisi() < playerA.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerA.getHedefY()][playerA.getHedefX()] == 0)
                           && playerA.getOyuncuAltinSayisi() < playerA.getHedefBelirlemeMaliyeti()))) {
//                    System.out.println("Oyuncuların altını bittiğinden oyun bitti!");//burası geçici ve öylesine , normalde adimat fonksiyonuna koyarız bunu
                       String info = "\nA Oyuncusunun attığı toplam adım sayısı: " + playerA.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerA.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerA.getToplananAltinSayisi() - playerA.getOyuncuAltinSayisi())
                               + "\nB Oyuncusunun attığı toplam adım sayısı: " + playerB.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerB.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerB.getToplananAltinSayisi() - playerB.getOyuncuAltinSayisi())
                               + "\nC Oyuncusunun attığı toplam adım sayısı: " + playerC.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerC.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerC.getToplananAltinSayisi() - playerC.getOyuncuAltinSayisi())
                               + "\nD Oyuncusunun attığı toplam adım sayısı: " + playerD.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerD.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerD.getToplananAltinSayisi() - playerD.getOyuncuAltinSayisi());
                       JOptionPane.showMessageDialog(null, "Oyuncu Altın Sayısı: " + playerC.getOyuncuAltinSayisi() + info, "C Oyuncusu Kazandı!", JOptionPane.INFORMATION_MESSAGE);
                       timer.cancel();
                   }

                   //D oyuncusunun kazanması
                   if ((playerC.getOyuncuAltinSayisi() < playerC.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerC.getHedefY()][playerC.getHedefX()] == 0)
                           && playerC.getOyuncuAltinSayisi() < playerC.getHedefBelirlemeMaliyeti()))
                           && (playerB.getOyuncuAltinSayisi() < playerB.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerB.getHedefY()][playerB.getHedefX()] == 0)
                           && playerB.getOyuncuAltinSayisi() < playerB.getHedefBelirlemeMaliyeti()))
                           && (playerA.getOyuncuAltinSayisi() < playerA.getHamleMaliyeti()
                           || ((board.getGoldLocations()[playerA.getHedefY()][playerA.getHedefX()] == 0)
                           && playerA.getOyuncuAltinSayisi() < playerA.getHedefBelirlemeMaliyeti()))) {
                       String info = "\nA Oyuncusunun attığı toplam adım sayısı: " + playerA.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerA.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerA.getToplananAltinSayisi() - playerA.getOyuncuAltinSayisi())
                               + "\nB Oyuncusunun attığı toplam adım sayısı: " + playerB.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerB.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerB.getToplananAltinSayisi() - playerB.getOyuncuAltinSayisi())
                               + "\nC Oyuncusunun attığı toplam adım sayısı: " + playerC.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerC.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerC.getToplananAltinSayisi() - playerC.getOyuncuAltinSayisi())
                               + "\nD Oyuncusunun attığı toplam adım sayısı: " + playerD.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerD.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerD.getToplananAltinSayisi() - playerD.getOyuncuAltinSayisi());
//                    System.out.println("Oyuncuların altını bittiğinden oyun bitti!");//burası geçici ve öylesine , normalde adimat fonksiyonuna koyarız bunu
                       JOptionPane.showMessageDialog(null, "Oyuncu Altın Sayısı: " + playerD.getOyuncuAltinSayisi() + info, "D Oyuncusu Kazandı!", JOptionPane.INFORMATION_MESSAGE);
                       timer.cancel();
                   }

                   //Haritada altın kalmadığında
                   if (board.getAltinSayisi() == 0 && board.getGizliAltinSayisi() == 0) {

//                    System.out.println("Haritada altın kalmadığı için oyun bitti.");
                       // A kazanması
                       String info = "\nA Oyuncusunun attığı toplam adım sayısı: " + playerA.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerA.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerA.getToplananAltinSayisi() - playerA.getOyuncuAltinSayisi())
                               + "\nB Oyuncusunun attığı toplam adım sayısı: " + playerB.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerB.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerB.getToplananAltinSayisi() - playerB.getOyuncuAltinSayisi())
                               + "\nC Oyuncusunun attığı toplam adım sayısı: " + playerC.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerC.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerC.getToplananAltinSayisi() - playerC.getOyuncuAltinSayisi())
                               + "\nD Oyuncusunun attığı toplam adım sayısı: " + playerD.getToplamAdimSayisi() + "   Topladığı toplam altın sayısı: " + playerD.getToplananAltinSayisi() + "   Harcanan altın sayısı: " + String.valueOf(player.getOyuncuAltinSayisi() + playerD.getToplananAltinSayisi() - playerD.getOyuncuAltinSayisi());
                       if (playerA.getOyuncuAltinSayisi() > playerB.getOyuncuAltinSayisi() && playerA.getOyuncuAltinSayisi() > playerC.getOyuncuAltinSayisi() && playerA.getOyuncuAltinSayisi() > playerD.getOyuncuAltinSayisi()) {
                           JOptionPane.showMessageDialog(null, "A Oyuncusu kazandı!\nOyuncu Altın Sayısı: " + playerA.getOyuncuAltinSayisi() + info, "Haritada Altın Kalmadı", JOptionPane.INFORMATION_MESSAGE);
                           timer.cancel();
                       }
                       // B kazanması
                       if (playerB.getOyuncuAltinSayisi() > playerA.getOyuncuAltinSayisi() && playerB.getOyuncuAltinSayisi() > playerC.getOyuncuAltinSayisi() && playerB.getOyuncuAltinSayisi() > playerD.getOyuncuAltinSayisi()) {
                           JOptionPane.showMessageDialog(null, "B Oyuncusu kazandı!\nOyuncu Altın Sayısı: " + playerB.getOyuncuAltinSayisi() + info, "Haritada Altın Kalmadı", JOptionPane.INFORMATION_MESSAGE);
                           timer.cancel();
                       }
                       // C kazanması
                       if (playerC.getOyuncuAltinSayisi() > playerB.getOyuncuAltinSayisi() && playerC.getOyuncuAltinSayisi() > playerA.getOyuncuAltinSayisi() && playerC.getOyuncuAltinSayisi() > playerD.getOyuncuAltinSayisi()) {
                           JOptionPane.showMessageDialog(null, "C Oyuncusu kazandı!\nOyuncu Altın Sayısı: " + playerC.getOyuncuAltinSayisi() + info, "Haritada Altın Kalmadı", JOptionPane.INFORMATION_MESSAGE);
                           timer.cancel();
                       }
                       // D kazanması
                       if (playerD.getOyuncuAltinSayisi() > playerA.getOyuncuAltinSayisi() && playerD.getOyuncuAltinSayisi() > playerB.getOyuncuAltinSayisi() && playerD.getOyuncuAltinSayisi() > playerC.getOyuncuAltinSayisi()) {
                           JOptionPane.showMessageDialog(null, "D Oyuncusu kazandı!\nOyuncu Altın Sayısı: " + playerD.getOyuncuAltinSayisi() + info, "Haritada Altın Kalmadı", JOptionPane.INFORMATION_MESSAGE);
                           timer.cancel();
                       }

                   }

               }
           };
           //2 saniyede bir çalış
           timer.schedule(sayacTimerTask, 0, 100);


    }//GEN-LAST:event_btnOyunaBaslaMouseClicked

    //Ayarlar ekranını açan buton
    private void btnAyarlarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAyarlarMouseClicked
        jPanelMainMenu.setVisible(false);
        jPanelSettings.setVisible(true);
        //varsayılan board oluşturuldu
        if (board == null) {
            board = new Board();
        }
        jTextFieldRows.setText(String.valueOf(board.getSatirSayisi()));
        jTextFieldCols.setText(String.valueOf(board.getSutunSayisi()));
        jTextFieldNumOfGoldsBoard.setText(String.valueOf(board.getAltinSayisi()));
        jTextFieldNumOfHiddenGoldsBoard.setText(String.valueOf(board.getGizliAltinSayisi()));
        //varsayılan player oluşturuldu
        if (player == null) {
            player = new Player();

        }
        jTextFieldNumOfGoldsPlayer.setText(String.valueOf(player.getOyuncuAltinSayisi()));
        jTextFieldStepSize.setText(String.valueOf(player.getAdimSayisi()));
        // varsayılan A oyuncusu oluşturuldu
        if (playerA == null) {
            playerA = new A(0, 0);

        }
        jTextFieldCostOfMovesA.setText(String.valueOf(playerA.getHamleMaliyeti()));
        jTextFieldTargetCostA.setText(String.valueOf(playerA.getHedefBelirlemeMaliyeti()));
        // varsayılan B oyuncusu oluşturuldu
        if (playerB == null) {
            playerB = new B(0, board.getSutunSayisi() - 1);

        }
        jTextFieldCostOfMovesB.setText(String.valueOf(playerB.getHamleMaliyeti()));
        jTextFieldTargetCostB.setText(String.valueOf(playerB.getHedefBelirlemeMaliyeti()));
        // varsayılan C oyuncusu oluşturuldu
        if (playerC == null) {
            playerC = new C(board.getSatirSayisi() - 1, board.getSutunSayisi() - 1);

        }
        jTextFieldCostOfMovesC.setText(String.valueOf(playerC.getHamleMaliyeti()));
        jTextFieldTargetCostC.setText(String.valueOf(playerC.getHedefBelirlemeMaliyeti()));
        // varsayılan D oyuncusu oluşturuldu
        if (playerD == null) {
            playerD = new D(board.getSatirSayisi() - 1, 0);

        }
        jTextFieldCostOfMovesD.setText(String.valueOf(playerD.getHamleMaliyeti()));
        jTextFieldTargetCostD.setText(String.valueOf(playerD.getHedefBelirlemeMaliyeti()));


    }//GEN-LAST:event_btnAyarlarMouseClicked

    // Ayarlar ekranını kapatan buton
    private void btnCloseSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseSettingsMouseClicked
        jPanelSettings.setVisible(false);
        jPanelMainMenu.setVisible(true);
    }//GEN-LAST:event_btnCloseSettingsMouseClicked
    // Ayarları varsayılan Ayarlara çeviren buton
    private void btnResetSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetSettingsMouseClicked
        //varsayılan board oluşturuldu
        board = new Board();
        jTextFieldRows.setText(String.valueOf(board.getSatirSayisi()));
        jTextFieldCols.setText(String.valueOf(board.getSutunSayisi()));
        jTextFieldNumOfGoldsBoard.setText(String.valueOf(board.getAltinSayisi()));
        jTextFieldNumOfHiddenGoldsBoard.setText(String.valueOf(board.getGizliAltinSayisi()));
        //varsayılan player oluşturuldu
        player = new Player();
        jTextFieldNumOfGoldsPlayer.setText(String.valueOf(player.getOyuncuAltinSayisi()));
        jTextFieldStepSize.setText(String.valueOf(player.getAdimSayisi()));
        // varsayılan A oyuncusu oluşturuldu
        playerA = new A(0, 0);
        jTextFieldCostOfMovesA.setText(String.valueOf(playerA.getHamleMaliyeti()));
        jTextFieldTargetCostA.setText(String.valueOf(playerA.getHedefBelirlemeMaliyeti()));
        // varsayılan B oyuncusu oluşturuldu
        playerB = new B(0, board.getSutunSayisi() - 1);
        jTextFieldCostOfMovesB.setText(String.valueOf(playerB.getHamleMaliyeti()));
        jTextFieldTargetCostB.setText(String.valueOf(playerB.getHedefBelirlemeMaliyeti()));
        // varsayılan C oyuncusu oluşturuldu
        playerC = new C(board.getSatirSayisi() - 1, board.getSutunSayisi() - 1);
        jTextFieldCostOfMovesC.setText(String.valueOf(playerC.getHamleMaliyeti()));
        jTextFieldTargetCostC.setText(String.valueOf(playerC.getHedefBelirlemeMaliyeti()));
        // varsayılan D oyuncusu oluşturuldu
        playerD = new D(board.getSatirSayisi() - 1, 0);
        jTextFieldCostOfMovesD.setText(String.valueOf(playerD.getHamleMaliyeti()));
        jTextFieldTargetCostD.setText(String.valueOf(playerD.getHedefBelirlemeMaliyeti()));
    }//GEN-LAST:event_btnResetSettingsMouseClicked

    private void btnSaveSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveSettingsMouseClicked
        try {
            //board
            board.setSatirSayisi(Integer.parseInt(jTextFieldRows.getText()));
            board.setSutunSayisi(Integer.parseInt(jTextFieldCols.getText()));
            board.setAltinSayisi(Integer.parseInt(jTextFieldNumOfGoldsBoard.getText()));
            board.setGizliAltinSayisi(Integer.parseInt(jTextFieldNumOfHiddenGoldsBoard.getText()));
            //player

            player.setAdimSayisi(Integer.parseInt(jTextFieldStepSize.getText()));
            player.setOyuncuAltinSayisi(Integer.parseInt(jTextFieldNumOfGoldsPlayer.getText()));
            //A
            playerA = new A(0, 0);

            playerA.setAdimSayisi(player.getAdimSayisi());
            playerA.setOyuncuAltinSayisi(player.getOyuncuAltinSayisi());
            playerA.setHamleMaliyeti(Integer.parseInt(jTextFieldCostOfMovesA.getText()));
            playerA.setHedefBelirlemeMaliyeti(Integer.parseInt(jTextFieldTargetCostA.getText()));
            //B

            playerB = new B(0, board.getSutunSayisi() - 1);

            playerB.setAdimSayisi(player.getAdimSayisi());
            playerB.setOyuncuAltinSayisi(player.getOyuncuAltinSayisi());
            playerB.setHamleMaliyeti(Integer.parseInt(jTextFieldCostOfMovesB.getText()));
            playerB.setHedefBelirlemeMaliyeti(Integer.parseInt(jTextFieldTargetCostB.getText()));
            //C
            playerC = new C(board.getSatirSayisi() - 1, board.getSutunSayisi() - 1);

            playerC.setAdimSayisi(player.getAdimSayisi());
            playerC.setOyuncuAltinSayisi(player.getOyuncuAltinSayisi());
            playerC.setHamleMaliyeti(Integer.parseInt(jTextFieldCostOfMovesC.getText()));
            playerC.setHedefBelirlemeMaliyeti(Integer.parseInt(jTextFieldTargetCostC.getText()));
            //D
            playerD = new D(board.getSatirSayisi() - 1, 0);

            playerD.setAdimSayisi(player.getAdimSayisi());
            playerD.setOyuncuAltinSayisi(player.getOyuncuAltinSayisi());
            playerD.setHamleMaliyeti(Integer.parseInt(jTextFieldCostOfMovesD.getText()));
            playerD.setHedefBelirlemeMaliyeti(Integer.parseInt(jTextFieldTargetCostD.getText()));

            jPanelSettings.setVisible(false);
            jPanelMainMenu.setVisible(true);
        } catch (NumberFormatException exception) {
            JOptionPane.showMessageDialog(null, "Lütfen sayı giriniz!", "HATA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveSettingsMouseClicked

    private void jTextFieldColsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldColsActionPerformed
        try {
            int row = Integer.parseInt(jTextFieldRows.getText());
            int col = Integer.parseInt(jTextFieldCols.getText());
            int altinSayisi = (int) (row * col * (0.2));
            int gizliAltinSayisi = (int) (altinSayisi * (0.1));
            jTextFieldNumOfGoldsBoard.setText(String.valueOf(altinSayisi));
            jTextFieldNumOfHiddenGoldsBoard.setText(String.valueOf(gizliAltinSayisi));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Lütfen sütün sayısını, sayı olarak giriniz!", "HATA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldColsActionPerformed

    private void jTextFieldRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRowsActionPerformed
        try {
            int row = Integer.parseInt(jTextFieldRows.getText());
            int col = Integer.parseInt(jTextFieldCols.getText());
            int altinSayisi = (int) (row * col * (0.2));
            int gizliAltinSayisi = (int) (altinSayisi * (0.1));
            jTextFieldNumOfGoldsBoard.setText(String.valueOf(altinSayisi));
            jTextFieldNumOfHiddenGoldsBoard.setText(String.valueOf(gizliAltinSayisi));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Lütfen satır sayısını, sayı olarak giriniz!", "HATA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldRowsActionPerformed

    private void jTextFieldNumOfGoldsBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumOfGoldsBoardActionPerformed
        try {
            int altinSayisi = Integer.parseInt(jTextFieldNumOfGoldsBoard.getText());
            int gizliAltinSayisi = (int) (altinSayisi * (0.1));
            jTextFieldNumOfHiddenGoldsBoard.setText(String.valueOf(gizliAltinSayisi));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Lütfen altın sayısını, sayı olarak giriniz!", "HATA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldNumOfGoldsBoardActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAyarlar;
    private javax.swing.JLabel btnCloseSettings;
    private javax.swing.JLabel btnOyunaBasla;
    private javax.swing.JLabel btnResetSettings;
    private javax.swing.JLabel btnSaveSettings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAltinSayisi;
    private javax.swing.JLabel jLabelGizliAltinSayisi;
    private javax.swing.JLabel jLabelGoldsA;
    private javax.swing.JLabel jLabelGoldsB;
    private javax.swing.JLabel jLabelGoldsC;
    private javax.swing.JLabel jLabelGoldsD;
    private javax.swing.JLabel jLabelKucukMadenci;
    private javax.swing.JLabel jLabelMadenci;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBoard;
    private javax.swing.JPanel jPanelGame;
    private javax.swing.JPanel jPanelMainMenu;
    private javax.swing.JPanel jPanelSettings;
    private javax.swing.JSlider jSliderGameSpeed;
    private javax.swing.JTextField jTextFieldCols;
    private javax.swing.JTextField jTextFieldCostOfMovesA;
    private javax.swing.JTextField jTextFieldCostOfMovesB;
    private javax.swing.JTextField jTextFieldCostOfMovesC;
    private javax.swing.JTextField jTextFieldCostOfMovesD;
    private javax.swing.JTextField jTextFieldNumOfGoldsBoard;
    private javax.swing.JTextField jTextFieldNumOfGoldsPlayer;
    private javax.swing.JTextField jTextFieldNumOfHiddenGoldsBoard;
    private javax.swing.JTextField jTextFieldRows;
    private javax.swing.JTextField jTextFieldStepSize;
    private javax.swing.JTextField jTextFieldTargetCostA;
    private javax.swing.JTextField jTextFieldTargetCostB;
    private javax.swing.JTextField jTextFieldTargetCostC;
    private javax.swing.JTextField jTextFieldTargetCostD;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) throws FileNotFoundException {
        PrintStream out = new PrintStream(new FileOutputStream("src//altinbulma//out//output.txt"));
        System.setOut(out);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainScreen().setVisible(true);

            }

        });

    }

}
